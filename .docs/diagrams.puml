@startuml "architecture"
!include <C4/C4_Container>

title System context hardware sharing management service

AddBoundaryTag("clientServer", $borderColor="green", $fontColor="green", $bgColor="#99ffcc")
AddBoundaryTag("managementServer", $borderColor="black", $fontColor="black", $bgColor="#ffff99")

note as hrm_rcs_legend
HRM and RCS stand for "Hardware resource management Service" and "Resource Client Server"
end note

note as rc_server_legend
As the RCS need to be very effective and use a very low amount
of resources from its host machine, maybe would be nice to use
a microtask based server.
end note

Person(client, "Student")

together {
    System_Boundary(ms, "Management system", $tags=managementServer) {
        Container(hrmServer, "HRM", "Quarkus, HTTP", "Centralized management system for the available hardware resources - workstations, servers and other devices")
        ContainerDb(hrmDb, "Events and\n entities", "mysql", "Saves all information about the instances, institutions and commands.")
        Rel_R(hrmServer, hrmDb, "read/write")
    }
    System_Boundary(es, "Executive system", $tags=clientServer) {
        Container(rcServer, "RCS", "?, RPC", "A microtask server that receive requests and sends them to the right program. It will only propagate the necessary data and return the product of the called process")
        ContainerDb(operations_db, "Operations", "sqlite", "A small dataset that keeps information about some commands processed by the instance (temporarily)\n")
        Rel_R(rcServer, operations_db, "read/write")
    }

    ' This communication will not be always on http.'
    ' In the future, the idea is to change it to a queue.'
    Rel(hrmServer, rcServer, "Command", "http")
    Rel_U(rcServer, hrmServer, "Result", "http")

    ' Container(ej, "EventJournal", "Quarkus, RPC", "Keeps a journal of every event based on HRM and RC logs")
    ' es -[hidden]left- ej
    ' ms -[hidden]left- ej
}

hrm_rcs_legend -right-> rcServer
hrm_rcs_legend -right-> hrmServer
rc_server_legend .[hidden]up. hrm_rcs_legend

Rel_D(client, hrmServer, "consumes", "https")

SHOW_LEGEND()

footer drawn with PlantUML v. %version() and C4-PlantUML v. C4Version()
@enduml

@startuml "class-diagram"
title Hardware resource management service (HRM or Domain)

package hrm_service {
    note as snote
    This version of the project will not implement
    Access Control on the resources. It wouldn't
    interfere on the domain and wouldn't be assertive
    as it is just an MVP.
    end note

    package computation {
        package events {
            class Command
            class Result
            Command --o Result
        }
        package execution {
            entity Program {}
            note as n1
                In case of connectivity issues with
                resources or instances, the service
                needs to turn off the use of it.
            end note
            entity Instance {
                - status: InstanceStatus;
            }
        }
        Instance .left.> Command : receive
        Instance .left.> Result : produce
    }
    package institutional {
        note as n2
            It's a computer that contains
            a client server and specific programs
            that allows users to do specific tasks.
            Each resource is unique to the institution
            that is using it.
        end note
        entity Resource {
            - status: ResourceStatus
            - memoryCapacity: Decimal
        }
        entity Institution {
            - name: String
        }
        entity Student {}
    }
}

Resource "1" *-r- "*" Instance
Program "1" *-u- "*" Instance

Student "*" --o "1" Institution
Institution "1" *-u- "*" Resource

snote -[hidden]-> institutional
n2 -[hidden]-> Resource
n1 -[hidden]-> Instance

footer drawn with PlantUML v. %version()
@enduml
